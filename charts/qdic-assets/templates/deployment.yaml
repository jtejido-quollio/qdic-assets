apiVersion: apps/v1
kind: Deployment
metadata: { name: qdic-assets }
spec:
  replicas: 2
  selector: { matchLabels: { app.kubernetes.io/name: qdic-assets } }
  template:
    metadata: { labels: { app.kubernetes.io/name: qdic-assets } }
    spec:
      containers:
        - name: assets
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: CONTROLLER_URL
              value: {{ .Values.env.CONTROLLER_URL | quote }}
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: qdic-assets-secrets, key: DATABASE_URL } }
            - name: RABBITMQ_URL
              value: {{ .Values.env.RABBITMQ_URL | quote }}
            - name: OPENSEARCH_URL
              value: {{ .Values.env.OPENSEARCH_URL | quote }}
            - name: ADVERTISE_ENDPOINT
              value: {{ default (printf "http://%s:%d" "qdic-assets" .Values.service.port) .Values.env.ADVERTISE_ENDPOINT | quote }}
          ports: [ { name: http, containerPort: 8080 } ]
          readinessProbe: { httpGet: { path: /healthz, port: http }, initialDelaySeconds: 3, periodSeconds: 5 }
---
apiVersion: v1
kind: Secret
metadata: { name: qdic-assets-secrets }
type: Opaque
stringData:
  DATABASE_URL: {{ .Values.env.DATABASE_URL | quote }}
---
apiVersion: v1
kind: Service
metadata: { name: qdic-assets }
spec:
  type: {{ .Values.service.type }}
  selector: { app.kubernetes.io/name: qdic-assets }
  ports: [ { name: http, port: {{ .Values.service.port }}, targetPort: http } ]
