"""Migration

Revision ID: 107631f875cb
Revises: a22965424c03
Create Date: 2025-08-27 14:43:26.326572

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import os


# revision identifiers, used by Alembic.
revision: str = "107631f875cb"
down_revision: Union[str, None] = "7dd8d518a253"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    password = os.getenv("REPLICATOR_PASSWORD", "replicator_password")

    # 1) Create Roles
    stmt = sa.text(
        """
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'replicator') THEN
            CREATE ROLE replicator WITH REPLICATION LOGIN PASSWORD :pwd;
        ELSE
            ALTER ROLE replicator WITH REPLICATION LOGIN PASSWORD :pwd;
        END IF;
    END
    $$;
    """
    ).bindparams(sa.bindparam("pwd", password))

    op.execute(stmt)

    # 2) Grant privileges on current objects
    #    - schema usage (to resolve names)
    #    - select on all existing tables
    #    - usage & select on all existing sequences (needed if tables use sequences)
    op.execute("GRANT USAGE ON SCHEMA public TO replicator;")
    op.execute("GRANT SELECT ON ALL TABLES IN SCHEMA public TO replicator;")
    op.execute("GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO replicator;")

    # 3) Default privileges so future tables/sequences in public are accessible to replicator
    #    (only affects objects created *after* this runs)
    op.execute(
        """
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
        GRANT SELECT ON TABLES TO replicator;
    """
    )
    op.execute(
        """
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
        GRANT USAGE, SELECT ON SEQUENCES TO replicator;
    """
    )

    # 4) Create publication for CDC (idempotent)
    #    If you plan to add more tables later, you can ALTER PUBLICATION ... ADD TABLE ...
    op.execute(
        """
        DO $$
        BEGIN
            -- Create the publication if it doesn't exist
            IF NOT EXISTS (
                SELECT 1 FROM pg_catalog.pg_publication WHERE pubname = 'events_publication'
            ) THEN
                CREATE PUBLICATION events_publication;
            END IF;

            -- Ensure the publication is owned by 'replicator' so Debezium can alter it
            PERFORM 1
            FROM pg_catalog.pg_publication p
            JOIN pg_catalog.pg_roles r ON r.oid = p.pubowner
            WHERE p.pubname = 'events_publication' AND r.rolname = 'replicator';

            IF NOT FOUND THEN
                EXECUTE 'ALTER PUBLICATION events_publication OWNER TO replicator';
            END IF;

            -- Add public.events if the table exists and is not already a member
            IF to_regclass('public.events') IS NOT NULL THEN
                PERFORM 1
                FROM pg_catalog.pg_publication_tables
                WHERE pubname = 'events_publication'
                AND schemaname = 'public'
                AND tablename = 'events';

                IF NOT FOUND THEN
                    EXECUTE 'ALTER PUBLICATION events_publication ADD TABLE public.events';
                END IF;
            END IF;
        END
        $$;
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        sa.text(
            """
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM pg_catalog.pg_publication WHERE pubname = 'events_publication'
                ) THEN
                    DROP PUBLICATION events_publication;
                END IF;
            END
            $$;
            """
        )
    )

    # Optional: revert default privileges (best-effort; safe if they werenâ€™t set)
    op.execute(
        """
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
        REVOKE SELECT ON TABLES FROM replicator;
    """
    )
    op.execute(
        """
    ALTER DEFAULT PRIVILEGES IN SCHEMA public
        REVOKE USAGE, SELECT ON SEQUENCES FROM replicator;
    """
    )

    # Revoke explicit grants on current objects (best-effort)
    op.execute("REVOKE USAGE ON SCHEMA public FROM replicator;")
    op.execute("REVOKE SELECT ON ALL TABLES IN SCHEMA public FROM replicator;")
    op.execute(
        "REVOKE USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public FROM replicator;"
    )

    # Drop the role (idempotent)
    op.execute(
        """
    DO $$
    BEGIN
        IF EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'replicator') THEN
            DROP ROLE replicator;
        END IF;
    END
    $$;
    """
    )
    # ### end Alembic commands ###
